name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # checkout repo, install dependencies
    - uses: actions/checkout@v2

    # restore cargo cache from previous runs
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.0.0

    - name: install alsa (sound driver) and cmake
      run: sudo apt-get update && sudo apt-get install libasound2-dev cmake
    - name: update rustc
      run: rustup update

    # check it builds
    - name: Build
      run: cargo build --verbose --all-targets --features cubeb

    # run tests
    - name: Run tests
      run: cargo test --verbose --features cubeb

    # make sure all code has been formatted with rustfmt
    - run: rustup component add rustfmt
    - name: check rustfmt
      run: cargo fmt -- --check --color always

    # run clippy to verify we have no warnings
    - run: rustup component add clippy
    - name: cargo clippy
      run: cargo clippy --all-targets --features cubeb -- -D warnings

    # check for rustdoc warnings
    - name: generate and verify rustdoc
      env:
        RUSTDOCFLAGS: -D warnings
      run: cargo doc --no-deps --document-private-items --workspace --features cubeb

    ## Benchmarks
    - name: install valgrind for benchmarks
      run: sudo apt-get install valgrind
    - name: Checkout master
      uses: actions/checkout@v2
      with:
        ref: master
    - name: cargo install iai dependency
      run: cargo add --dev iai
    - name: Run benchmarks for main branch
      run: cargo bench
    - name: Checkout PR
      uses: actions/checkout@v2
    - name: cargo install iai dependency
      run: cargo add --dev iai
    - name: Run bench against baseline
      run: cargo bench | tee bench.txt
    - name: Write result in PR
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');

          // read the output file
          const iai_feature = fs.readFileSync("bench.txt", {encoding:'utf8', flag:'r'});

          // form message
          const message = 'Benchmark result:\n\n' + iai_feature;

          // post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          })
