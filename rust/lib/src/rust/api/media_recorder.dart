// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'capacity.dart';
import 'media_streams.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `BlobEvent` is not used by any `pub` functions, thus it is ignored.
// The type `MediaRecorderInner` is not used by any `pub` functions, thus it is ignored.
// The type `RecordedData` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaRecorder>>
@sealed
class MediaRecorder extends RustOpaque {
  MediaRecorder.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MediaRecorder.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MediaRecorder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MediaRecorder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MediaRecorderPtr,
  );

  Future<void> clearOndataavailable({dynamic hint}) => RustLib.instance.api
      .crateApiMediaRecorderMediaRecorderClearOndataavailable(
          that: this, hint: hint);

  Future<void> clearOnerror({dynamic hint}) => RustLib.instance.api
      .crateApiMediaRecorderMediaRecorderClearOnerror(that: this, hint: hint);

  Future<void> clearOnstop({dynamic hint}) => RustLib.instance.api
      .crateApiMediaRecorderMediaRecorderClearOnstop(that: this, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates a new `MediaRecorder` object, given a [`MediaStream`] to record.
  ///
  /// Only supports WAV file format currently.
  static Future<MediaRecorder> newInstance(
          {required MediaStream stream, dynamic hint}) =>
      RustLib.instance.api
          .crateApiMediaRecorderMediaRecorderNew(stream: stream, hint: hint);

  Future<void> setOndataavailable({required F callback, dynamic hint}) =>
      RustLib.instance.api.crateApiMediaRecorderMediaRecorderSetOndataavailable(
          that: this, callback: callback, hint: hint);

  Future<void> setOnerror({required F callback, dynamic hint}) =>
      RustLib.instance.api.crateApiMediaRecorderMediaRecorderSetOnerror(
          that: this, callback: callback, hint: hint);

  Future<void> setOnstop({required F callback, dynamic hint}) =>
      RustLib.instance.api.crateApiMediaRecorderMediaRecorderSetOnstop(
          that: this, callback: callback, hint: hint);

  /// Begin recording media
  ///
  /// # Panics
  ///
  /// Will panic when the recorder has already started
  Future<void> start({dynamic hint}) => RustLib.instance.api
      .crateApiMediaRecorderMediaRecorderStart(that: this, hint: hint);

  Future<void> stop({dynamic hint}) => RustLib.instance.api
      .crateApiMediaRecorderMediaRecorderStop(that: this, hint: hint);
}
