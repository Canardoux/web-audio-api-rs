// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../context/context.dart';
import '../node/audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'processor.dart';
import 'quantum.dart';

// The type `OutgoingEdge` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn AudioProcessor >>>
@sealed
class BoxAudioProcessor extends RustOpaque {
  BoxAudioProcessor.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BoxAudioProcessor.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxAudioProcessor,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxAudioProcessor,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxAudioProcessorPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Graph>>
@sealed
class Graph extends RustOpaque {
  Graph.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Graph.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Graph,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Graph,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GraphPtr,
  );

  Future<void> addEdge(
          {required (AudioNodeId, BigInt) source,
          required (AudioNodeId, BigInt) dest,
          dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphAddEdge(
          that: this, source: source, dest: dest, hint: hint);

  Future<void> addNode(
          {required AudioNodeId index,
          required Node reclaimId,
          required BoxAudioProcessor processor,
          required BigInt numberOfInputs,
          required BigInt numberOfOutputs,
          required ChannelConfigInner channelConfig,
          dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphAddNode(
          that: this,
          index: index,
          reclaimId: reclaimId,
          processor: processor,
          numberOfInputs: numberOfInputs,
          numberOfOutputs: numberOfOutputs,
          channelConfig: channelConfig,
          hint: hint);

  Future<void> beforeDrop(
          {required AudioWorkletGlobalScope scope, dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphBeforeDrop(
          that: this, scope: scope, hint: hint);

  /// Check if the graph is fully initialized and can start rendering
  Future<bool> isActive({dynamic hint}) => RustLib.instance.api
      .crateApiRenderGraphGraphIsActive(that: this, hint: hint);

  Future<void> markControlHandleDropped(
          {required AudioNodeId index, dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphMarkControlHandleDropped(
          that: this, index: index, hint: hint);

  Future<void> markCycleBreaker({required AudioNodeId index, dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphMarkCycleBreaker(
          that: this, index: index, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Graph> newInstance(
          {required LlqProducerAudioNodeId reclaimIdChannel, dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphNew(
          reclaimIdChannel: reclaimIdChannel, hint: hint);

  Future<void> removeEdge(
          {required (AudioNodeId, BigInt) source,
          required (AudioNodeId, BigInt) dest,
          dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphRemoveEdge(
          that: this, source: source, dest: dest, hint: hint);

  /// Render a single audio quantum by traversing the node list
  Future<AudioRenderQuantum> render(
          {required AudioWorkletGlobalScope scope, dynamic hint}) =>
      RustLib.instance.api
          .crateApiRenderGraphGraphRender(that: this, scope: scope, hint: hint);

  Future<void> routeMessage(
          {required AudioNodeId index, required Any msg, dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphRouteMessage(
          that: this, index: index, msg: msg, hint: hint);

  Future<void> setChannelCount(
          {required AudioNodeId index, required BigInt v, dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphSetChannelCount(
          that: this, index: index, v: v, hint: hint);

  Future<void> setChannelCountMode(
          {required AudioNodeId index,
          required ChannelCountMode v,
          dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphSetChannelCountMode(
          that: this, index: index, v: v, hint: hint);

  Future<void> setChannelInterpretation(
          {required AudioNodeId index,
          required ChannelInterpretation v,
          dynamic hint}) =>
      RustLib.instance.api.crateApiRenderGraphGraphSetChannelInterpretation(
          that: this, index: index, v: v, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Node>>
@sealed
class Node extends RustOpaque {
  Node.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Node.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Node,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Node,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NodePtr,
  );

  /// Get the current buffer for AudioParam values
  Future<AudioRenderQuantum> getBuffer({dynamic hint}) => RustLib.instance.api
      .crateApiRenderGraphNodeGetBuffer(that: this, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Sender < EventDispatch >>>
@sealed
class SenderEventDispatch extends RustOpaque {
  SenderEventDispatch.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  SenderEventDispatch.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_SenderEventDispatch,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_SenderEventDispatch,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SenderEventDispatchPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<dyn Any>>
@sealed
class Any extends RustOpaque {
  Any.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Any.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Any,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Any,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AnyPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<llq :: Producer < AudioNodeId >>>
@sealed
class LlqProducerAudioNodeId extends RustOpaque {
  LlqProducerAudioNodeId.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  LlqProducerAudioNodeId.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_LlqProducerAudioNodeId,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_LlqProducerAudioNodeId,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_LlqProducerAudioNodeIdPtr,
  );
}
