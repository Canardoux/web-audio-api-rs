// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AtomicF32>>
@sealed
class AtomicF32 extends RustOpaque {
  AtomicF32.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  AtomicF32.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AtomicF32,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AtomicF32,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AtomicF32Ptr,
  );

  Future<double> load({required Ordering ordering, dynamic hint}) =>
      RustLib.instance.api
          .crateApiApiAtomicF32Load(that: this, ordering: ordering, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<AtomicF32> newInstance({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiApiAtomicF32New(value: value, hint: hint);

  Future<void> store(
          {required double value, required Ordering ordering, dynamic hint}) =>
      RustLib.instance.api.crateApiApiAtomicF32Store(
          that: this, value: value, ordering: ordering, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AtomicF64>>
@sealed
class AtomicF64 extends RustOpaque {
  AtomicF64.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  AtomicF64.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AtomicF64,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AtomicF64,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AtomicF64Ptr,
  );

  Future<double> load({required Ordering ordering, dynamic hint}) =>
      RustLib.instance.api
          .crateApiApiAtomicF64Load(that: this, ordering: ordering, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<AtomicF64> newInstance({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiApiAtomicF64New(value: value, hint: hint);

  Future<void> store(
          {required double value, required Ordering ordering, dynamic hint}) =>
      RustLib.instance.api.crateApiApiAtomicF64Store(
          that: this, value: value, ordering: ordering, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Ordering>>
@sealed
class Ordering extends RustOpaque {
  Ordering.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  Ordering.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Ordering,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Ordering,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OrderingPtr,
  );
}
