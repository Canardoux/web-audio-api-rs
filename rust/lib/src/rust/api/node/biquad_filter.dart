// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../analysis.dart';
import '../param.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `BiquadFilterRenderer` is not used by any `pub` functions, thus it is ignored.
// The type `Coefficients` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BiquadFilterNode>>
@sealed
class BiquadFilterNode extends RustOpaque {
  BiquadFilterNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  BiquadFilterNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BiquadFilterNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BiquadFilterNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BiquadFilterNodePtr,
  );

  /// Returns the detune audio parameter
  Future<AudioParam> detune({dynamic hint}) => RustLib.instance.api
      .crateApiNodeBiquadFilterBiquadFilterNodeDetune(that: this, hint: hint);

  /// Returns the frequency audio parameter
  Future<AudioParam> frequency({dynamic hint}) =>
      RustLib.instance.api.crateApiNodeBiquadFilterBiquadFilterNodeFrequency(
          that: this, hint: hint);

  /// Returns the gain audio parameter
  Future<AudioParam> gain({dynamic hint}) => RustLib.instance.api
      .crateApiNodeBiquadFilterBiquadFilterNodeGain(that: this, hint: hint);

  /// Returns the frequency response for the specified frequencies
  ///
  /// # Arguments
  ///
  /// * `frequency_hz` - frequencies for which frequency response of the filter should be calculated
  /// * `mag_response` - magnitude of the frequency response of the filter
  /// * `phase_response` - phase of the frequency response of the filter
  ///
  /// # Panics
  ///
  /// This function will panic if arguments' lengths don't match
  ///
  Future<void> getFrequencyResponse(
          {required F32 frequencyHz,
          required F32 magResponse,
          required F32 phaseResponse,
          dynamic hint}) =>
      RustLib.instance.api
          .crateApiNodeBiquadFilterBiquadFilterNodeGetFrequencyResponse(
              that: this,
              frequencyHz: frequencyHz,
              magResponse: magResponse,
              phaseResponse: phaseResponse,
              hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// returns a `BiquadFilterNode` instance
  ///
  /// # Arguments
  ///
  /// * `context` - audio context in which the audio node will live.
  /// * `options` - biquad filter options
  static Future<BiquadFilterNode> newInstance(
          {required C context,
          required BiquadFilterOptions options,
          dynamic hint}) =>
      RustLib.instance.api.crateApiNodeBiquadFilterBiquadFilterNodeNew(
          context: context, options: options, hint: hint);

  /// Returns the Q audio parameter
  Future<AudioParam> q({dynamic hint}) => RustLib.instance.api
      .crateApiNodeBiquadFilterBiquadFilterNodeQ(that: this, hint: hint);

  /// biquad filter type setter
  ///
  /// # Arguments
  ///
  /// * `type_` - the biquad filter type (lowpass, highpass,...)
  Future<void> setType({required BiquadFilterType type, dynamic hint}) =>
      RustLib.instance.api.crateApiNodeBiquadFilterBiquadFilterNodeSetType(
          that: this, type: type, hint: hint);

  /// Returns the biquad filter type
  Future<BiquadFilterType> type({dynamic hint}) => RustLib.instance.api
      .crateApiNodeBiquadFilterBiquadFilterNodeType(that: this, hint: hint);
}

/// Options for constructing a [`BiquadFilterNode`]
class BiquadFilterOptions {
  final double q;
  final double detune;
  final double frequency;
  final double gain;
  final BiquadFilterType type;
  final AudioNodeOptions audioNodeOptions;

  const BiquadFilterOptions({
    required this.q,
    required this.detune,
    required this.frequency,
    required this.gain,
    required this.type,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode =>
      q.hashCode ^
      detune.hashCode ^
      frequency.hashCode ^
      gain.hashCode ^
      type.hashCode ^
      audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BiquadFilterOptions &&
          runtimeType == other.runtimeType &&
          q == other.q &&
          detune == other.detune &&
          frequency == other.frequency &&
          gain == other.gain &&
          type == other.type &&
          audioNodeOptions == other.audioNodeOptions;
}

/// Biquad filter types
enum BiquadFilterType {
  /// Allows frequencies below the cutoff frequency to pass through and
  /// attenuates frequencies above the cutoff. (12dB/oct rolloff)
  lowpass,

  /// Frequencies above the cutoff frequency are passed through, but
  /// frequencies below the cutoff are attenuated. (12dB/oct rolloff)
  highpass,

  /// Allows a range of frequencies to pass through and attenuates the
  /// frequencies below and above this frequency range.
  bandpass,

  /// Allows all frequencies through, except for a set of frequencies.
  notch,

  /// Allows all frequencies through, but changes the phase relationship
  /// between the various frequencies.
  allpass,

  /// Allows all frequencies through, but adds a boost (or attenuation) to
  /// a range of frequencies.
  peaking,

  /// Allows all frequencies through, but adds a boost (or attenuation) to
  /// the lower frequencies.
  lowshelf,

  /// Allows all frequencies through, but adds a boost (or attenuation) to
  /// the higher frequencies.
  highshelf,
  ;
}
