// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../param.dart';
import 'analyser.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `ConstantSourceRenderer` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConstantSourceNode>>
@sealed
class ConstantSourceNode extends RustOpaque {
  ConstantSourceNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ConstantSourceNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ConstantSourceNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConstantSourceNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ConstantSourceNodePtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<ConstantSourceNode> newInstance(
          {required C context,
          required ConstantSourceOptions options,
          dynamic hint}) =>
      RustLib.instance.api.crateApiNodeConstantSourceConstantSourceNodeNew(
          context: context, options: options, hint: hint);

  Future<AudioParam> offset({dynamic hint}) =>
      RustLib.instance.api.crateApiNodeConstantSourceConstantSourceNodeOffset(
          that: this, hint: hint);
}

/// Options for constructing an [`ConstantSourceNode`]
class ConstantSourceOptions {
  /// Initial parameter value of the constant signal
  final double offset;

  const ConstantSourceOptions({
    required this.offset,
  });

  @override
  int get hashCode => offset.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConstantSourceOptions &&
          runtimeType == other.runtimeType &&
          offset == other.offset;
}
