// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../param.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `HrtfState` is not used by any `pub` functions, thus it is ignored.
// The type `PannerRenderer` is not used by any `pub` functions, thus it is ignored.
// The type `SpatialParams` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PannerNode>>
@sealed
class PannerNode extends RustOpaque {
  PannerNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  PannerNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PannerNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PannerNode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PannerNodePtr,
  );

  Future<double> coneInnerAngle({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeConeInnerAngle(that: this, hint: hint);

  Future<double> coneOuterAngle({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeConeOuterAngle(that: this, hint: hint);

  Future<double> coneOuterGain({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeConeOuterGain(that: this, hint: hint);

  Future<DistanceModelType> distanceModel({dynamic hint}) =>
      RustLib.instance.api
          .crateApiNodePannerPannerNodeDistanceModel(that: this, hint: hint);

  Future<double> maxDistance({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeMaxDistance(that: this, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// returns a `PannerNode` instance
  ///
  /// # Arguments
  ///
  /// * `context` - audio context in which the audio node will live.
  /// * `options` - stereo panner options
  ///
  /// # Panics
  ///
  /// Will panic if:
  ///
  /// * `options.channel_config.count` is greater than 2
  /// * `options.channel_config.mode` is `ChannelCountMode::Max`
  ///
  /// Can panic when loading HRIR-sphere
  static Future<PannerNode> newInstance(
          {required C context, required PannerOptions options, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeNew(
          context: context, options: options, hint: hint);

  Future<AudioParam> orientationX({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeOrientationX(that: this, hint: hint);

  Future<AudioParam> orientationY({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeOrientationY(that: this, hint: hint);

  Future<AudioParam> orientationZ({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeOrientationZ(that: this, hint: hint);

  Future<PanningModelType> panningModel({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodePanningModel(that: this, hint: hint);

  Future<AudioParam> positionX({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodePositionX(that: this, hint: hint);

  Future<AudioParam> positionY({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodePositionY(that: this, hint: hint);

  Future<AudioParam> positionZ({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodePositionZ(that: this, hint: hint);

  Future<double> refDistance({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeRefDistance(that: this, hint: hint);

  Future<double> rolloffFactor({dynamic hint}) => RustLib.instance.api
      .crateApiNodePannerPannerNodeRolloffFactor(that: this, hint: hint);

  Future<void> setConeInnerAngle({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetConeInnerAngle(
          that: this, value: value, hint: hint);

  Future<void> setConeOuterAngle({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetConeOuterAngle(
          that: this, value: value, hint: hint);

  /// Set the coneOuterGain attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is not in the range [0, 1]
  Future<void> setConeOuterGain({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetConeOuterGain(
          that: this, value: value, hint: hint);

  Future<void> setDistanceModel(
          {required DistanceModelType value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetDistanceModel(
          that: this, value: value, hint: hint);

  /// Set the maxDistance attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is negative.
  Future<void> setMaxDistance({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetMaxDistance(
          that: this, value: value, hint: hint);

  Future<void> setOrientation(
          {required double x,
          required double y,
          required double z,
          dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetOrientation(
          that: this, x: x, y: y, z: z, hint: hint);

  Future<void> setPanningModel(
          {required PanningModelType value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetPanningModel(
          that: this, value: value, hint: hint);

  Future<void> setPosition(
          {required double x,
          required double y,
          required double z,
          dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetPosition(
          that: this, x: x, y: y, z: z, hint: hint);

  /// Set the refDistance attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is negative.
  Future<void> setRefDistance({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetRefDistance(
          that: this, value: value, hint: hint);

  /// Set the rolloffFactor attribute
  ///
  /// # Panics
  ///
  /// Panics if the provided value is negative.
  Future<void> setRolloffFactor({required double value, dynamic hint}) =>
      RustLib.instance.api.crateApiNodePannerPannerNodeSetRolloffFactor(
          that: this, value: value, hint: hint);
}

/// Algorithm to reduce the volume of an audio source as it moves away from the listener
enum DistanceModelType {
  linear,
  inverse,
  exponential,
  ;
}

/// Options for constructing a [`PannerNode`]
class PannerOptions {
  final PanningModelType panningModel;
  final DistanceModelType distanceModel;
  final double positionX;
  final double positionY;
  final double positionZ;
  final double orientationX;
  final double orientationY;
  final double orientationZ;
  final double refDistance;
  final double maxDistance;
  final double rolloffFactor;
  final double coneInnerAngle;
  final double coneOuterAngle;
  final double coneOuterGain;
  final AudioNodeOptions audioNodeOptions;

  const PannerOptions({
    required this.panningModel,
    required this.distanceModel,
    required this.positionX,
    required this.positionY,
    required this.positionZ,
    required this.orientationX,
    required this.orientationY,
    required this.orientationZ,
    required this.refDistance,
    required this.maxDistance,
    required this.rolloffFactor,
    required this.coneInnerAngle,
    required this.coneOuterAngle,
    required this.coneOuterGain,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode =>
      panningModel.hashCode ^
      distanceModel.hashCode ^
      positionX.hashCode ^
      positionY.hashCode ^
      positionZ.hashCode ^
      orientationX.hashCode ^
      orientationY.hashCode ^
      orientationZ.hashCode ^
      refDistance.hashCode ^
      maxDistance.hashCode ^
      rolloffFactor.hashCode ^
      coneInnerAngle.hashCode ^
      coneOuterAngle.hashCode ^
      coneOuterGain.hashCode ^
      audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PannerOptions &&
          runtimeType == other.runtimeType &&
          panningModel == other.panningModel &&
          distanceModel == other.distanceModel &&
          positionX == other.positionX &&
          positionY == other.positionY &&
          positionZ == other.positionZ &&
          orientationX == other.orientationX &&
          orientationY == other.orientationY &&
          orientationZ == other.orientationZ &&
          refDistance == other.refDistance &&
          maxDistance == other.maxDistance &&
          rolloffFactor == other.rolloffFactor &&
          coneInnerAngle == other.coneInnerAngle &&
          coneOuterAngle == other.coneOuterAngle &&
          coneOuterGain == other.coneOuterGain &&
          audioNodeOptions == other.audioNodeOptions;
}

/// Spatialization algorithm used to position the audio in 3D space
enum PanningModelType {
  equalPower,
  hrtf,
  ;
}
