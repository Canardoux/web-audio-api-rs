// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'analyser.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamAudioSourceNode>>
@sealed
class MediaStreamAudioSourceNode extends RustOpaque {
  MediaStreamAudioSourceNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MediaStreamAudioSourceNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_MediaStreamAudioSourceNode,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_MediaStreamAudioSourceNode,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MediaStreamAudioSourceNodePtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new `MediaStreamAudioSourceNode`
  ///
  /// # Panics
  ///
  /// This method will panic when the provided `MediaStream` does not contain any audio tracks.
  static Future<MediaStreamAudioSourceNode> newInstance(
          {required C context,
          required MediaStreamAudioSourceOptions options,
          dynamic hint}) =>
      RustLib.instance.api
          .crateApiNodeMediaStreamSourceMediaStreamAudioSourceNodeNew(
              context: context, options: options, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<& 'a MediaStream>>
@sealed
class AMediaStream extends RustOpaque {
  AMediaStream.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  AMediaStream.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AMediaStream,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AMediaStream,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AMediaStreamPtr,
  );
}

/// Options for constructing a [`MediaStreamAudioSourceNode`]
class MediaStreamAudioSourceOptions {
  final AMediaStream mediaStream;

  const MediaStreamAudioSourceOptions({
    required this.mediaStream,
  });

  @override
  int get hashCode => mediaStream.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MediaStreamAudioSourceOptions &&
          runtimeType == other.runtimeType &&
          mediaStream == other.mediaStream;
}
