// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `ChannelSplitterRenderer` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChannelSplitterNode>>
@sealed
class ChannelSplitterNode extends RustOpaque {
  ChannelSplitterNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ChannelSplitterNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ChannelSplitterNode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ChannelSplitterNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ChannelSplitterNodePtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<ChannelSplitterNode> newInstance(
          {required C context,
          required ChannelSplitterOptions options,
          dynamic hint}) =>
      RustLib.instance.api.crateApiNodeChannelSplitterChannelSplitterNodeNew(
          context: context, options: options, hint: hint);
}

/// Options for constructing a [`ChannelSplitterNode`]
class ChannelSplitterOptions {
  final BigInt numberOfOutputs;
  final AudioNodeOptions audioNodeOptions;

  const ChannelSplitterOptions({
    required this.numberOfOutputs,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode => numberOfOutputs.hashCode ^ audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ChannelSplitterOptions &&
          runtimeType == other.runtimeType &&
          numberOfOutputs == other.numberOfOutputs &&
          audioNodeOptions == other.audioNodeOptions;
}
