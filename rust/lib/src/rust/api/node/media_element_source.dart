// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'analyser.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaElementAudioSourceNode>>
@sealed
class MediaElementAudioSourceNode extends RustOpaque {
  MediaElementAudioSourceNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MediaElementAudioSourceNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_MediaElementAudioSourceNode,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_MediaElementAudioSourceNode,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MediaElementAudioSourceNodePtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new `MediaElementAudioSourceNode`
  ///
  /// # Panics
  ///
  /// This method will panic when there already exists a source node for the given
  /// `MediaElement`. You can only set up a single source node per element!
  static Future<MediaElementAudioSourceNode> newInstance(
          {required C context,
          required MediaElementAudioSourceOptions options,
          dynamic hint}) =>
      RustLib.instance.api
          .crateApiNodeMediaElementSourceMediaElementAudioSourceNodeNew(
              context: context, options: options, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<& 'a mut MediaElement>>
@sealed
class AMutMediaElement extends RustOpaque {
  AMutMediaElement.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  AMutMediaElement.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AMutMediaElement,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AMutMediaElement,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AMutMediaElementPtr,
  );
}

/// Options for constructing a [`MediaElementAudioSourceNode`]
class MediaElementAudioSourceOptions {
  final AMutMediaElement mediaElement;

  const MediaElementAudioSourceOptions({
    required this.mediaElement,
  });

  @override
  int get hashCode => mediaElement.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MediaElementAudioSourceOptions &&
          runtimeType == other.runtimeType &&
          mediaElement == other.mediaElement;
}
