// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../param.dart';
import 'analyser.dart';
import 'audio_node.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `DynamicsCompressorRenderer` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DynamicsCompressorNode>>
@sealed
class DynamicsCompressorNode extends RustOpaque {
  DynamicsCompressorNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  DynamicsCompressorNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_DynamicsCompressorNode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_DynamicsCompressorNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DynamicsCompressorNodePtr,
  );

  Future<AudioParam> attack({dynamic hint}) => RustLib.instance.api
      .crateApiNodeDynamicsCompressorDynamicsCompressorNodeAttack(
          that: this, hint: hint);

  Future<AudioParam> knee({dynamic hint}) => RustLib.instance.api
      .crateApiNodeDynamicsCompressorDynamicsCompressorNodeKnee(
          that: this, hint: hint);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<DynamicsCompressorNode> newInstance(
          {required C context,
          required DynamicsCompressorOptions options,
          dynamic hint}) =>
      RustLib.instance.api
          .crateApiNodeDynamicsCompressorDynamicsCompressorNodeNew(
              context: context, options: options, hint: hint);

  Future<AudioParam> ratio({dynamic hint}) => RustLib.instance.api
      .crateApiNodeDynamicsCompressorDynamicsCompressorNodeRatio(
          that: this, hint: hint);

  Future<double> reduction({dynamic hint}) => RustLib.instance.api
      .crateApiNodeDynamicsCompressorDynamicsCompressorNodeReduction(
          that: this, hint: hint);

  Future<AudioParam> release({dynamic hint}) => RustLib.instance.api
      .crateApiNodeDynamicsCompressorDynamicsCompressorNodeRelease(
          that: this, hint: hint);

  Future<AudioParam> threshold({dynamic hint}) => RustLib.instance.api
      .crateApiNodeDynamicsCompressorDynamicsCompressorNodeThreshold(
          that: this, hint: hint);
}

/// Options for constructing a [`DynamicsCompressorNode`]
class DynamicsCompressorOptions {
  final double attack;
  final double knee;
  final double ratio;
  final double release;
  final double threshold;
  final AudioNodeOptions audioNodeOptions;

  const DynamicsCompressorOptions({
    required this.attack,
    required this.knee,
    required this.ratio,
    required this.release,
    required this.threshold,
    required this.audioNodeOptions,
  });

  @override
  int get hashCode =>
      attack.hashCode ^
      knee.hashCode ^
      ratio.hashCode ^
      release.hashCode ^
      threshold.hashCode ^
      audioNodeOptions.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DynamicsCompressorOptions &&
          runtimeType == other.runtimeType &&
          attack == other.attack &&
          knee == other.knee &&
          ratio == other.ratio &&
          release == other.release &&
          threshold == other.threshold &&
          audioNodeOptions == other.audioNodeOptions;
}
