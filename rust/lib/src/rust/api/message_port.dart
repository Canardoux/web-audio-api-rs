// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'capacity.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<M>>
@sealed
class M extends RustOpaque {
  M.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  M.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_M,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_M,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MessagePort>>
@sealed
class MessagePort extends RustOpaque {
  MessagePort.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MessagePort.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MessagePort,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessagePort,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessagePortPtr,
  );

  /// Unset the callback to run when a message arrives on the channel.
  Future<void> clearOnmessage({dynamic hint}) => RustLib.instance.api
      .crateApiMessagePortMessagePortClearOnmessage(that: this, hint: hint);

  /// Send a message from the port.
  Future<void> postMessage({required M msg, dynamic hint}) =>
      RustLib.instance.api.crateApiMessagePortMessagePortPostMessage(
          that: this, msg: msg, hint: hint);

  /// Register callback to run when a message arrives on the channel.
  ///
  /// Only a single event handler is active at any time. Calling this method multiple times will
  /// override the previous event handler.
  Future<void> setOnmessage({required F callback, dynamic hint}) =>
      RustLib.instance.api.crateApiMessagePortMessagePortSetOnmessage(
          that: this, callback: callback, hint: hint);
}
