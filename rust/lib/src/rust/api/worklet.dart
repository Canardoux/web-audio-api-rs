// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'message_port.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `AudioWorkletRenderer` is not used by any `pub` functions, thus it is ignored.
// The type `Processor` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioParamValues>>
@sealed
class AudioParamValues extends RustOpaque {
  AudioParamValues.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  AudioParamValues.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioParamValues,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioParamValues,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioParamValuesPtr,
  );

  /// Get the computed values for the given [`crate::api::param::AudioParam`]
  ///
  /// For k-rate params or if the (a-rate) parameter is constant for this block, it will provide
  /// a slice of length 1. In other cases, i.e. a-rate param with scheduled automations it will
  /// provide a slice of length equal to the render quantum size (default: 128)
  Future<double> get({required AudioParamId index, dynamic hint}) =>
      RustLib.instance.api.crateApiRenderProcessorAudioParamValuesGet(
          that: this, index: index, hint: hint);

  /// Get the computed values for the given [`AudioParam`]
  ///
  /// For k-rate params or if the (a-rate) parameter is constant for this block, it will provide
  /// a slice of length 1. In other cases, i.e. a-rate param with scheduled automations it will
  /// provide a slice of length equal to the render quantum size (default: 128)
  Future<Float32List> get({required String name, dynamic hint}) => RustLib
      .instance.api
      .crateApiWorkletAudioParamValuesGet(that: this, name: name, hint: hint);

  Future<int> keys({dynamic hint}) => RustLib.instance.api
      .crateApiWorkletAudioParamValuesKeys(that: this, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNode>>
@sealed
class AudioWorkletNode extends RustOpaque {
  AudioWorkletNode.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  AudioWorkletNode.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AudioWorkletNode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AudioWorkletNode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioWorkletNodePtr,
  );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Construct a new AudioWorkletNode
  ///
  /// # Panics
  ///
  /// This function panics when
  /// - the number of inputs and the number of outputs of the supplied options are both equal to
  /// zero.
  /// - any of the output channel counts is equal to zero or larger than 32 ([`MAX_CHANNELS`])
  static Future<AudioWorkletNode> newInstance(
          {required int context,
          required AudioWorkletNodeOptions options,
          dynamic hint}) =>
      RustLib.instance.api.crateApiWorkletAudioWorkletNodeNew(
          context: context, options: options, hint: hint);

  /// Collection of AudioParam objects with associated names of this node
  ///
  /// This map is populated from a list of [`AudioParamDescriptor`]s in the
  /// [`AudioWorkletProcessor`] class constructor at the instantiation.
  Future<HashMapStringAudioParam> parameters({dynamic hint}) =>
      RustLib.instance.api
          .crateApiWorkletAudioWorkletNodeParameters(that: this, hint: hint);

  /// Message port to the processor in the render thread
  ///
  /// Every AudioWorkletNode has an associated port which is the [`MessagePort`]. It is connected
  /// to the port on the corresponding [`AudioWorkletProcessor`] object allowing bidirectional
  /// communication between the AudioWorkletNode and its AudioWorkletProcessor.
  Future<MessagePort> port({dynamic hint}) => RustLib.instance.api
      .crateApiWorkletAudioWorkletNodePort(that: this, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AudioWorkletNodeOptions>>
@sealed
class AudioWorkletNodeOptions extends RustOpaque {
  AudioWorkletNodeOptions.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  AudioWorkletNodeOptions.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_AudioWorkletNodeOptions,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_AudioWorkletNodeOptions,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_AudioWorkletNodeOptionsPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<HashMap < String , AudioParam >>>
@sealed
class HashMapStringAudioParam extends RustOpaque {
  HashMapStringAudioParam.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  HashMapStringAudioParam.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_HashMapStringAudioParam,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_HashMapStringAudioParam,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_HashMapStringAudioParamPtr,
  );
}
