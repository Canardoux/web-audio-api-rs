// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `MediaStreamTrackInner` is not used by any `pub` functions, thus it is ignored.

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrack>>
@sealed
class MediaStreamTrack extends RustOpaque {
  MediaStreamTrack.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MediaStreamTrack.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MediaStreamTrack,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MediaStreamTrack,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MediaStreamTrackPtr,
  );

  Future<void> close({dynamic hint}) => RustLib.instance.api
      .crateApiMediaStreamsMediaStreamTrackClose(that: this, hint: hint);

  static Future<MediaStreamTrack> fromIter({required T iter, dynamic hint}) =>
      RustLib.instance.api
          .crateApiMediaStreamsMediaStreamTrackFromIter(iter: iter, hint: hint);

  Future<MediaStreamTrackIter> iter({dynamic hint}) => RustLib.instance.api
      .crateApiMediaStreamsMediaStreamTrackIter(that: this, hint: hint);

  Future<MediaStreamTrackState> readyState({dynamic hint}) => RustLib
      .instance.api
      .crateApiMediaStreamsMediaStreamTrackReadyState(that: this, hint: hint);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MediaStreamTrackIter>>
@sealed
class MediaStreamTrackIter extends RustOpaque {
  MediaStreamTrackIter.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MediaStreamTrackIter.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MediaStreamTrackIter,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MediaStreamTrackIter,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_MediaStreamTrackIterPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<T>>
@sealed
class T extends RustOpaque {
  T.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  T.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_T,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_T,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TPtr,
  );
}

/// Stream of media content.
///
/// A stream consists of several tracks, such as video or audio tracks. Each track is specified as
/// an instance of [`MediaStreamTrack`].
class MediaStream {
  final List<MediaStreamTrack> tracks;

  const MediaStream({
    required this.tracks,
  });

  static Future<MediaStream> fromTracks(
          {required List<MediaStreamTrack> tracks, dynamic hint}) =>
      RustLib.instance.api.crateApiMediaStreamsMediaStreamFromTracks(
          tracks: tracks, hint: hint);

  Future<MediaStreamTrack> getTracks({dynamic hint}) => RustLib.instance.api
      .crateApiMediaStreamsMediaStreamGetTracks(that: this, hint: hint);

  @override
  int get hashCode => tracks.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MediaStream &&
          runtimeType == other.runtimeType &&
          tracks == other.tracks;
}

/// Ready-state of a [`MediaStreamTrack`]
enum MediaStreamTrackState {
  /// The track is active (the track's underlying media source is making a best-effort attempt to
  /// provide data in real time).
  live,

  /// The track has ended (the track's underlying media source is no longer providing data, and
  /// will never provide more data for this track). Once a track enters this state, it never
  /// exits it.
  ended,
  ;
}
